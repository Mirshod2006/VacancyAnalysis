# -*- coding: utf-8 -*-
"""FrontEndVacancyAnalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UTfbM3d2sWjxUrHmTeN9xWlNiLMqsJLo
"""

import json
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
with open("result.json", "r") as f:
    data = json.load(f)
print(data)

def body_split(body):
  body = body.lower()
  company = body.split("kompaniya:")[1].split("\n")[0] if "kompaniya:" in body else ""
  job_pattern = body.split("ish shakli:")[1].split("\n")[0] if "ish shakli:" in body else ""
  location = body.split("hudud:")[1].split("\n")[0] if "hudud:" in body else ""
  salary = body.split("maosh:")[1].split("\n")[0] if "maosh:" in body else ""
  experience = body.split("tajriba:")[1].split("\n")[0] if "tajriba:" in body else ""
  internship = body.split("amaliyot:")[1].split("\n")[0] if "amaliyot:" in body else ""
  return {"company":company,"job pattern":job_pattern,"location":location,"salary":salary,"experience":experience,"internship":internship}

proper_techs = ["react","vue","js","restful api","git","react.js", "vue.js","nuxt", "nuxt.js","next", "next.js", "angular", "svelte", "ember", "backbone", "jquery", "bootstrap", "tailwind", "materialize", "bulma", "foundation", "semantic-ui", "purecss", "css", "html", "javascript", "typescript", "redux", "vuex", "webpack", "babel", "gulp", "grunt", "parcel", "rollup", "sass", "less", "postcss", "eslint", "prettier", "jest", "mocha", "cypress", "storybook", "graphql", "apollo", "axios", "fetch", "d3", "three.js", "gsap", "webassembly", "pwa"]
del len
import builtins
len = builtins.len
messages = data["messages"]
categorized_body_data = []
for message in messages:
    current_techs = []
    parts = message["text"]
    text_joined = " ".join([part.get("text","") if isinstance(part, dict) else part for part in parts])
    length = len(text_joined.split("\n\n"))
    technologies = text_joined.split("\n\n")[3] if length > 3 else ""
    position = text_joined.split("\n\n")[1] if length > 1 else ""
    body = text_joined.split("\n\n")[2] if length > 2 else ""
    # I am analysing only vacancy chanel named FrontEnd Vacancy, because there is one type of message
    # I will not need post_type
    categorized_body = body_split(body)
    categorized_body["date"] = message["date"]
    categorized_body["position"] = (position.lower()).split("\n")[0] if "lavozim:" else ""
    technologies = technologies.lower()
    # To select real vacancies below if statement is used
    if categorized_body["company"] != "" and categorized_body["location"]!="":
      for tech in proper_techs:
        if tech in technologies:
          current_techs.append(tech)
      current_techs = [tech.replace("react.js", "react")
             .replace("vue.js", "vue")
             .replace("nuxt.js", "nuxt")
             .replace("next.js", "next")
         for tech in current_techs]
      categorized_body["technologies"] = current_techs
      categorized_body_data.append(categorized_body)

with open("categorized_body_data.json", "w") as f:
    json.dump(categorized_body_data, f)

technologies = []
dates = []
for entry in categorized_body_data:
    if entry.get('technologies') and entry.get('date'):
        techs = entry['technologies']
        date = entry['date']
        for tech in techs:
          technologies.append(tech)
          dates.append(date)

df = pd.DataFrame({'Technologies':technologies,"Date":dates})
df.head()

df['Date'] = pd.to_datetime(df['Date'])
df['Year'] = df['Date'].dt.year
df['Month'] = df['Date'].dt.month

tech_year = df.groupby(['Technologies','Year']).size().unstack(fill_value=0)
tech_month = df.groupby(['Technologies','Month']).size().unstack(fill_value=0)

tech_year.T.plot(kind='bar', stacked=True, figsize=(14, 8))
plt.title('Technology Popularity Over the Years')
plt.xlabel('Year')
plt.ylabel('Number of Postings')
plt.legend(title='Technology')
plt.show()

tech_total = df['Technologies'].value_counts()
tech_total.plot.pie(figsize=(8, 8), autopct='%1.1f%%', startangle=140)
plt.title('Overall Technology Distribution')
plt.ylabel('')
plt.show()

